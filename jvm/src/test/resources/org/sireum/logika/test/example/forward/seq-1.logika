import org.sireum.logika._

val a: ZS = ZS(2, 4, 6, 0)

l"""{ 1. a == ZS(2,4,6,0)                               premise
      2. {
           3. i: Z
           4. {
                5. 0 <= i & i < 3                       assume
                6. 0 <= i                               &e1 5
                7. i < 3                                &e2 5
                8. a(i) > 1                             algebra 6 7 1
              }
           9. 0 <= i & i < 3 -> a(i) > 1                ->i 4
         }
     10. all j: (0 ..< 3) a(j) > 1                      alli 2
     11. 0 <= 3                                         algebra
     12. 3 < a.size                                     algebra 1        }"""
a(3) = 5

l"""{ 1. all j: (0 ..< 3)  a_old(j) > 1                 premise
      2. a(3) == 5                                      premise
      3. all q_i: (0 ..< a.size)
           q_i != 3 -> a(q_i) == a_old(q_i)             premise
      4. a.size == a_old.size                           premise
      5. 3 < a_old.size                                 premise
      6. {
           7. i: Z
           8. 0 <= i & i < 3 -> a_old(i) > 1            alle 1 i
           9. {
               10. 0 <= i & i <= 3                      assume
               11. 0 <= i                               &e1 10
               12. i <= 3                               &e2 10
               13. {
                    14. i < 3                           assume
                    15. 0 <= i & i < 3                  &i 11 14
                    16. a_old(i) > 1                    ->e 8 15
                    17. 0 <= i & i < a.size ->
                          (i != 3 -> a(i) == a_old(i))  alle 3 i
                    18. i < a.size                      algebra 14 4 5
                    19. 0 <= i & i < a.size             &i 11 18
                    20. i != 3 -> a(i) == a_old(i)      ->e 17 19
                    21. i != 3                          algebra 14
                    22. a(i) == a_old(i)                ->e 20 21
                    23. a(i) > 1                        algebra 22 16
                   }
               24. {
                    25. i == 3                          assume
                    26. a(i) > 1                        algebra 25 2
                   }
               // note: <= means < or ==
               27. a(i) > 1                             ore 12 13 24
              }
          28. 0 <= i & i <= 3 -> a(i) > 1               ->i 9
         }
     29. all j: (0 .. 3) a(j) > 1                       alli 6
     30. 3 < a.size                                     algebra 4 5      }"""
val b: ZS = a.clone

l"""{ 1. all j: (0 .. 3) a(j) > 1                       premise
      2. b == a                                         premise
      3. 0 <= 0                                         algebra
      4. 3 < a.size                                     premise
      5. 0 < b.size                                     algebra 4 2      }"""
b(0) = 1

l"""{ 1. b(0) == 1                                      premise
      2. all j: (0 .. 3) a(j) > 1                       premise
      3. 0 <= 0 & 0 <= 3 -> a(0) > 1                    alle 2 0
      4. 0 <= 0                                         algebra
      5. 0 <= 3                                         algebra
      6. 0 <= 0 & 0 <= 3                                andi 4 5
      7. a(0) > 1                                       ->e 3 6          }"""
println(a, ", ", b)
