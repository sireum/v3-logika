import org.sireum.logika._

var g: Z = 0

l"""{ 1. g == 0                   premise
      2. g ≥ 0                    algebra 1   }"""
l"""{ invariant g ≥ 0                         }"""

def f(a: ZS): Z = {
  l"""{
    requires 0 < a.size
    modifies g, a
    ensures  g == g_in + 1
             a(0) == a_in(0) + 1
             result == g
  }"""

  l"""{ 1. g == g_in              premise
        2. a == a_in              premise
        3. 0 < a.size             premise
        4. g ≥ 0                  premise     }"""
  g = g + 1
  l"""{ 1. 0 ≤ 0                  algebra
        2. 0 < a.size             premise
        3. g == g_old + 1         premise
        4. g_old == g_in          premise
        5. g == g_in + 1          algebra 3 4
        6. a == a_in              premise
        7. g_old ≥ 0              premise
        8. g ≥ 0                  algebra 3 7 }"""
  a(0) = a(0) + 1
  l"""{ 1. a(0) == a_old(0) + 1   premise
        2. a_old == a_in          premise
        3. a(0) == a_in(0) + 1    subst1 2 1
        4. g == g_in + 1          premise
        5. g == g                 algebra
        6. g ≥ 0                  premise     }"""
  return g
}

val a: ZS = ZS(1)
val b: ZS = a.clone
var c: Z  = 4
val d: Z  = 5
l"""{ 1. a == ZS(1)               premise
      2. 0 < a.size               algebra 1
      3. b == a                   premise
      4. c == 4                   premise
      5. d == 5                   premise
      6. g ≥ 0                    invariant   }"""
c = f(a)
l"""{ 1. b == a_old               premise
      2. g == g_old + 1           premise
      3. a(0) == a_old(0) + 1     premise
      4. c_old == 4               premise
      5. c == g                   premise
      6. d == 5                   premise     }"""