import org.sireum.logika._

l"""⊢ ∀ x: S32  x >= s32"0" ∧ x < S32.Max -> x + s32"1" >= s32"0" """

def ffsRefImp(word: S8): S8 = {
  // ffsRef
  var i: S8 = s8"0"
  var r: S8 = s8"0"

  if (word != s8"0") {
    if (((s8"1" << i) & word) != s8"0") { // 0
      i = i + s8"1"
      r = i
    } else {
      i = i + s8"1"
      if (((s8"1" << i) & word) != s8"0") { // 1
        i = i + s8"1"
        r = i
      } else {
        i = i + s8"1"
        if (((s8"1" << i) & word) != s8"0") { // 2
          i = i + s8"1"
          r = i
        } else {
          i = i + s8"1"
          if (((s8"1" << i) & word) != s8"0") { // 3
            i = i + s8"1"
            r = i
          } else {
            i = i + s8"1"
            if (((s8"1" << i) & word) != s8"0") { // 4
              i = i + s8"1"
              r = i
            } else {
              i = i + s8"1"
              if (((s8"1" << i) & word) != s8"0") { // 5
                i = i + s8"1"
                 r = i
              } else {
                i = i + s8"1"
                if (((s8"1" << i) & word) != s8"0") { // 6
                  i = i + s8"1"
                   r = i
                } else {
                  i = i + s8"1"
                  if (((s8"1" << i) & word) != s8"0") { // 7
                    i = i + s8"1"
                    r = i
                  } else {
                    assert (false)
                  }
                }
              }
            }
          }
        }
      }
    }

    // ffsImp
    var j: S8 = word
    var n: S8 = s8"1"
    var r2: S8 = s8"0"
    if ((j & s8"0xf") == s8"0") {
      n = n + s8"4"
      j = j >> s8"4"
    }
    if ((j & s8"0x3") == s8"0") {
      n = n + s8"2"
      j = j >> s8"2"
    }
    if (j != s8"0") {
      r2 = n + ((j + s8"1") & s8"0x1")
    }

    assert(r == r2)

  }
  return r
}