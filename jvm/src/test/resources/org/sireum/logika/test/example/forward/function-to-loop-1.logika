import org.sireum.logika._

l"""{ fact
        def f(x: Z): Z
          = 1,            if x == 0   (base)
          = f(x - 1) * x, if x > 0    (rec)         }"""
def factorial(n: Z): Z = {
  l"""{ requires  n >= 0
        ensures   result == f(n)                   }"""
  var ans: Z = 1
  l"""{ 1. n >= 0                   premise
        2. ans == 1                 premise        }"""
  if (n == 0) {
    l"""{ 1. ans == 1               premise
          2. all x: Z
               x == 0  ->
                 f(x) == 1          fact base
          3. n == 0  ->  f(n) == 1  alle 2 n
          4. n == 0                 premise
          5. f(n) == 1              ->e 3 4
          8. ans == f(n)            subst2 5 1     }"""
  } else {
    l"""{ 1. not(n == 0)            premise
          2. n >= 0                 premise
          3. n > 0                  algebra 1 2
          4. n - 1 >= 0             algebra 1 2    }"""
    val sub: Z = factorial(n - 1)
    l"""{ 1. sub == f(n - 1)        premise
          2. n > 0                  premise        }"""
    ans = n * sub
    l"""{ 1. ans == n * sub         premise
          2. sub == f(n-1)          premise
          3. n > 0                  premise
          4. ans == n * f(n-1)      subst1 2 1
          5. ans == f(n-1) * n      algebra 4
          6. all x: Z  x > 0 ->
               f(x) == f(x-1) * x   fact rec
          7. n > 0 ->
                f(n) == f(n-1) * n  foralle 6 n
          8. f(n) == f(n-1) * n     ->e 7 3
          9. ans == f(n)            subst2 8 5     }"""
  }
  l"""{ 1.  ans == f(n)             premise        }"""
  return ans
}