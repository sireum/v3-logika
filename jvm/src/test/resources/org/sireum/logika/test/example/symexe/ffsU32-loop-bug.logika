import org.sireum.logika._

val word: U32 = U32.random

/*
if(word == 0x101010) return 4;
int i = 0;
    if(!word)
        return 0;
    for(int cnt = 0; cnt < 32; cnt++)
        if(((1 << i++) & word) != 0)
            return i;
    return 0;
*/
// ffsRef
var r: U32 = u32"0"

if (word == u32"0x101010") {
  r = u32"4"
} else {
  if (word != u32"0") {
    var cnt: U32 = u32"0"
    var i: U32 = u32"0"
    while (cnt < u32"32" & r == u32"0") {
      if (((u32"1" << i) & word) != u32"0") {
        i = i + u32"1"
        r = i
      } else {
        i = i + u32"1"
      }
      cnt = cnt + u32"1"
    }
  } else {
    r = u32"0"
  }
}

// ffsImp
var j: U32 = word
var n: U32 = u32"1"
var r2: U32 = u32"0"
if ((j & u32"0xffff") == u32"0") {
  n = n + u32"16"
  j = j >> u32"16"
}
if ((j & u32"0xff") == u32"0") {
  n = n + u32"8"
  j = j >> u32"8"
}
if ((j & u32"0xf") == u32"0") {
  n = n + u32"4"
  j = j >> u32"4"
}
if ((j & u32"0x3") == u32"0") {
  n = n + u32"2"
  j = j >> u32"2"
}
if (j != u32"0") {
  r2 = n + ((j + u32"1") & u32"0x1")
}

assert(r == r2)

