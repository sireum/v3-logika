import org.sireum.logika._

val word: S8 = S8.random

/*
int i = 0;
    if(!word)
        return 0;
    for(int cnt = 0; cnt < 32; cnt++)
        if(((1 << i++) & word) != 0)
            return i;
    return 0;
*/
// ffsRef
var r: S8 = s8"0"

if (word != s8"0") {
  var cnt: S8 = s8"0"
  var i: S8 = s8"0"
  while (cnt < s8"8" & r == s8"0") {
    if (((s8"1" << i) & word) != s8"0") {
      i = i + s8"1"
      r = i
    } else {
      i = i + s8"1"
    }
    cnt = cnt + s8"1"
  }
} else {
  r = s8"0"
}

// ffsImp
var j: S8 = word
var n: S8 = s8"1"
var r2: S8 = s8"0"
if ((j & s8"0xf") == s8"0") {
  n = n + s8"4"
  j = j >> s8"4"
}
if ((j & s8"0x3") == s8"0") {
  n = n + s8"2"
  j = j >> s8"2"
}
if (j != s8"0") {
  r2 = n + ((j + s8"1") & s8"0x1")
}

assert(r == r2)
