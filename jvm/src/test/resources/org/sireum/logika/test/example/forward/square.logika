import org.sireum.logika._

// Updates parameter a, which is of type array of integers (ZS),
// in place so that each of its ints are squared
def square(a: ZS): Unit = {
  l"""{ modifies     a
        post         ∀i: (0 ..< a.size)  a(i) == a_in(i) * a_in(i)              }"""

  l"""{ 1. a == a_in                                         premise            }"""

  var x: Z = 0

  l"""{ 1. a == a_in                                         premise
        2. x == 0                                            premise
        3. 0 ≤ x                                             algebra 2
        4. 0 ≤ a.size                                        algebra
        5. x ≤ a.size                                        subst2 2 4
        6. {
             7. j: Z
             8. {
                  9. 0 ≤ j ∧ j < x                           assume
                 10. 0 ≤ j                                   ∧e1 9
                 11. j < x                                   ∧e2 9
                 12. ⊥                                       algebra 10 11 2
                 13. a(j) == a_in(j) * a_in(j)               ⊥e 12
                }
            14. 0 ≤ j ∧ j < x → a(j) == a_in(j) * a_in(j)    →i 8
           }
       15. ∀i: (0 ..< x)  a(i) == a_in(i) * a_in(i)          ∀i 6
       16. {
            17. j: Z
            18. {
                 19. x ≤ j ∧ j < a.size                      assume
                 20. x ≤ j                                   ∧e1 19
                 21. j < a.size                              ∧e2 19
                 22. a(j) == a_in(j)                         algebra 1 2 20 21
                }
            23. x ≤ j ∧ j < a.size → a(j) == a_in(j)         →i 18
           }
       24. ∀i: (x ..< a.size)  a(i) == a_in(i)               ∀i 16              }"""

  while (x != a.size) {
    l"""{ invariant  ∀i: (0 ..< x)  a(i) == a_in(i) * a_in(i)
                     ∀i: (x ..< a.size)  a(i) == a_in(i)
                     0 ≤ x
                     x ≤ a.size
          modifies   x, a                                                       }"""

    l"""{ 1. ∀i: (0 ..< x)  a(i) == a_in(i) * a_in(i)        premise
          2. ∀i: (x ..< a.size)  a(i) == a_in(i)             premise
          3. 0 ≤ x                                           premise
          4. x ≤ a.size                                      premise
          5. x ≠ a.size                                      premise
          6. x < a.size                                      algebra 4 5        }"""

    a(x) = a(x) * a(x)

    l"""{ 1. a(x) == a_old(x) * a_old(x)                     premise
          2. ∀i: (0 ..< x)  a_old(i) == a_in(i) * a_in(i)    premise
          3. ∀i: (x ..< a_old.size)  a_old(i) == a_in(i)     premise
          4. a.size == a_old.size                            premise
          5. x < a_old.size                                  premise
          6. x < a.size                                      subst2 4 5
          7. ∀i: (x ..< a.size)  a_old(i) == a_in(i)         subst2 4 3
          8. x ≤ x ∧ x < a.size → a_old(x) == a_in(x)        ∀e 7 x
          9. x ≤ x                                           algebra
         10. x ≤ x ∧ x < a.size                              ∧i 9 6
         11. a_old(x) == a_in(x)                             →e 8 10
         12. a(x) == a_in(x) * a_in(x)                       subst1 11 1
         13. ∀q_i: (0 ..< a.size)
               q_i ≠ x → a(q_i) == a_old(q_i)                premise
         14. {
              15. j: Z
              16. 0 ≤ j ∧ j < a.size →
                    (j ≠ x → a(j) == a_old(j))               ∀e 13 j
              17. {
                   18. 0 ≤ j ∧ j ≤ x                         assume
                   19. 0 ≤ j ∧ j < x →
                         a_old(j) == a_in(j) * a_in(j)       ∀e 2 j
                   20. 0 ≤ j                                 ∧e1 18
                   21. j ≤ x                                 ∧e2 18
                   22. {
                        23. j < x                            assume
                        24. 0 ≤ j ∧ j < x                    ∧i 20 23
                        25. a_old(j) == a_in(j) * a_in(j)    →e 19 24
                        26. j < a.size                       algebra 23 6
                        27. j ≠ x                            algebra 23
                        29. 0 ≤ j ∧ j < a.size               ∧i 20 26
                        30. j ≠ x → a(j) == a_old(j)         →e 16 29
                        31. a(j) == a_old(j)                 →e 30 27
                        32. a(j) == a_in(j) * a_in(j)        subst2 31 25
                       }
                   33. {
                        34. j == x                           assume
                        35. a(j) == a_in(j) * a_in(j)        subst2 34 12
                       }
                   36. a(j) == a_in(j) * a_in(j)             ∨e 21 22 33
                  }
              37. 0 ≤ j ∧ j ≤ x → a(j) == a_in(j) * a_in(j)  →i 17
             }
         38. ∀i: (0 .. x) a(i) == a_in(i) * a_in(i)          ∀i 14
         39. 0 ≤ x                                           premise
         40. {
              41. j: Z
              42. 0 ≤ j ∧ j < a.size →
                    (j ≠ x → a(j) == a_old(j))               ∀e 13 j
              43. {
                   44. x + 1 ≤ j ∧ j < a.size                assume
                   45. x + 1 ≤ j                             ∧e1 44
                   46. j < a.size                            ∧e2 44
                   47. 0 ≤ j                                 algebra 45 39
                   48. j ≠ x                                 algebra 45
                   49. 0 ≤ j ∧ j < a.size                    ∧i 47 46
                   50. j ≠ x → a(j) == a_old(j)              →e 42 49
                   51. a(j) == a_old(j)                      →e 50 48
                   52. x ≤ j ∧ j < a.size →
                         a_old(j) == a_in(j)                 ∀e 7 j
                   53. x ≤ j                                 algebra 45
                   54. x ≤ j ∧ j < a.size                    ∧i 53 46
                   55. a_old(j) == a_in(j)                   →e 52 54
                   56. a(j) == a_in(j)                       subst1 55 51
                  }
              57. x + 1 ≤ j ∧ j < a.size → a(j) == a_in(j)   →i 43
             }
         58. ∀i: (x + 1 ..< a.size)  a(i) == a_in(i)         ∀i 40              }"""

    x = x + 1

    l"""{ 1. x == x_old + 1                                  premise
          2. 0 ≤ x_old                                       premise
          3. x_old < a.size                                  premise
          4. ∀i: (0 .. x_old)  a(i) == a_in(i) * a_in(i)     premise
          5. ∀i: (x_old + 1 ..< a.size)  a(i) == a_in(i)     premise
          6. 0 ≤ x                                           algebra 1 2
          7. x ≤ a.size                                      algebra 1 3
          8. ∀i: (x ..< a.size)  a(i) == a_in(i)             subst2 1 5
          9. {
              10. j: Z
              11. 0 ≤ j ∧ j ≤ x_old →
                    a(j) == a_in(j) * a_in(j)                ∀e 4 j
              12. {
                   13. 0 ≤ j ∧ j < x                         assume
                   14. 0 ≤ j                                 ∧e1 13
                   15. j < x                                 ∧e2 13
                   16. j ≤ x_old                             algebra 15 1
                   17. 0 ≤ j ∧ j ≤ x_old                     ∧i 14 16
                   18. a(j) == a_in(j) * a_in(j)             →e 11 17
                  }
              19. 0 ≤ j ∧ j < x → a(j) == a_in(j) * a_in(j)  →i 12
             }
         20. ∀i: (0 ..< x)  a(i) == a_in(i) * a_in(i)        ∀i 9               }"""
  }
  l"""{ 1. ∀i: (0 ..< x)  a(i) == a_in(i) * a_in(i)          premise
        2. not (x != a.size)                                 premise
        3. x == a.size                                       algebra 2
        4. ∀i: (0 ..< a.size)  a(i) == a_in(i) * a_in(i)     subst1 3 1         }"""
}