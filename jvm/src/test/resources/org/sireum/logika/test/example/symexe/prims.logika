import org.sireum.logika._

val bvtrue: B = true
val bvT: B = T
val bvfalse: B = false
val bvF: B = F
assert((bvtrue == bvT) & bvT & (bvfalse == bvF) & !bvF & ~bvF)

val zv1000: Z = 1000
val zv1: Z = z"1"
l"""⊢ zv1000 == z"1000" ∧ zv1 == 1"""

val z8vM128: Z8 = z8"-128"
val z8v0: Z8 = z8"0"
val z8v127: Z8 = z8"127"
l"""⊢ z8vM128 == Z8.Min ∧ z8v127 == Z8.Max"""

val z16vM32768: Z16 = z16"-32 768"
val z16v0: Z16 = z16"0"
val z16v32767: Z16 = z16"32 767"
l"""⊢ z16vM32768 == Z16.Min ∧ z16v32767 == Z16.Max"""

val z32vM2147483648: Z32 = z32"-2 147 483 648"
val z32v0: Z32 = z32"0"
val z32v2147483647: Z32 = z32"2 147 483 647"
l"""⊢ z32vM2147483648 == Z32.Min ∧ z32v2147483647 == Z32.Max"""

val z64vM9223372036854775808: Z64 = z64"-9 223 372 036 854 775 808"
val z64v0: Z64 = z64"0"
val z64v9223372036854775807: Z64 = z64"9 223 372 036 854 775 807"
l"""⊢ z64vM9223372036854775808 == Z64.Min ∧ z64v9223372036854775807 == Z64.Max"""

l"""⊢ N.Min == n"0" ∧ N8.Min == n8"0" ∧ N16.Min == n16"0" ∧ N32.Min == n32"0" ∧ N64.Min == n64"0" """

val n8v255: N8 = n8"255"
l"""⊢ n8v255 == N8.Max"""

val n16v65535: N16 = n16"65 535"
l"""⊢ n16v65535 == N16.Max"""

val n32v4294967295: N32 = n32"4 294 967 295"
l"""⊢ n32v4294967295 == N32.Max"""

val n64v18446744073709551615: N64 = n64"18 446 744 073 709 551 615"
l"""⊢ n64v18446744073709551615 == N64.Max"""

l"""⊤ ⊢ ∀s8: S8  s8 << s8"2" == s8 * s8"4" """
l"""⊤ ⊢ ∀s8: S8  s8 >= s8"0" → s8 >> s8"2" == s8 / s8"4" """
l"""⊤ ⊢ ∀s8: S8  (s8 & s8"0x80") == s8"0" → s8 >> s8"1" == s8 / s8"2" """
val s8vM128: S8 = s8"-128"
val s8v0: S8 = s8"0"
val s8v127: S8 = s8"127"
l"""⊢ s8vM128 == S8.Min ∧ s8v127 == S8.Max ∧ S8.Min - s8"1" == S8.Max ∧ S8.Max + s8"1" == S8.Min"""
l"""⊢ s8vM128 >> s8"2" == s8"-32" ∧ s8v127 >> s8"2" == s8"31" ∧ s8vM128 >>> s8"2" == s8"0x20" """

l"""⊤ ⊢ ∀s16: S16  s16 << s16"2" == s16 * s16"4" """
l"""⊤ ⊢ ∀s16: S16  s16 >= s16"0" → s16 >> s16"2" == s16 / s16"4" """
l"""⊤ ⊢ ∀s16: S16  (s16 & s16"0x8000") == s16"0" → s16 >> s16"1" == s16 / s16"2" """
val s16vM32768: S16 = s16"-32 768"
val s16v0: S16 = s16"0"
val s16v32767: S16 = s16"32 767"
l"""⊢ s16vM32768 == S16.Min ∧ s16v32767 == S16.Max ∧ S16.Min - s16"1" == S16.Max ∧ S16.Max + s16"1" == S16.Min"""
l"""⊢ s16vM32768 >> s16"2" == s16"-8192" ∧ s16v32767 >> s16"2" == s16"8191" ∧ s16vM32768 >>> s16"2" == s16"0x2000" """

l"""⊤ ⊢ ∀s32: S32  s32 << s32"2" == s32 * s32"4" """
l"""⊤ ⊢ ∀s32: S32  s32 >= s32"0" → s32 >> s32"2" == s32 / s32"4" """
l"""⊤ ⊢ ∀s32: S32  (s32 & s32"0x80000000") == s32"0" → s32 >> s32"1" == s32 / s32"2" """
val s32vM2147483648: S32 = s32"-2 147 483 648"
val s32v0: S32 = s32"0"
val s32v2147483647: S32 = s32"2 147 483 647"
l"""⊢ s32vM2147483648 == S32.Min ∧ s32v2147483647 == S32.Max ∧ S32.Min - s32"1" == S32.Max ∧ S32.Max + s32"1" == S32.Min"""
l"""⊢ s32vM2147483648 >> s32"2" == s32"-536870912" ∧ s32v2147483647 >> s32"2" == s32"536870911" ∧ s32vM2147483648 >>> s32"2" == s32"0x20000000" """

l"""⊤ ⊢ ∀s64: S64  s64 << s64"2" == s64 * s64"4" """
// Z3 returns Unknown: l"""⊤ ⊢ ∀s64: S64  s64 >= s64"0" → s64 >> s64"2" == s64 / s64"4" """
// Z3 returns Unknown: l"""⊤ ⊢ ∀s64: S64  (s64 & s64"0x8000000000000000") == s64"0" → s64 >> s64"1" == s64 / s64"2" """
val s64vM9223372036854775808: S64 = s64"-9 223 372 036 854 775 808"
val S64v0: S64 = s64"0"
val s64v9223372036854775807: S64 = s64"9 223 372 036 854 775 807"
l"""⊢ s64vM9223372036854775808 == S64.Min ∧ s64v9223372036854775807 == S64.Max ∧ S64.Min - s64"1" == S64.Max ∧ S64.Max + s64"1" == S64.Min"""
l"""⊢ s64vM9223372036854775808 >> s64"2" == s64"-2305843009213693952" ∧ s64v9223372036854775807 >> s64"2" == s64"2305843009213693951" ∧ s64vM9223372036854775808 >>> s64"2" == s64"0x2000000000000000" """

l"""⊤ ⊢ U8.Min == u8"0" ∧ U16.Min == u16"0" ∧ U32.Min == u32"0" ∧ U64.Min == u64"0" """
l"""⊤ ⊢ ∀u8: U8  u8 << u8"1" == u8 * u8"2" """
l"""⊤ ⊢ ∀u16: U16  u16 << u16"1" == u16 * u16"2" """
l"""⊤ ⊢ ∀u32: U32  u32 << u32"1" == u32 * u32"2" """
l"""⊤ ⊢ ∀u64: U64  u64 << u64"1" == u64 * u64"2" """
l"""⊤ ⊢ ∀u8: U8  u8 >> u8"2" == u8 / u8"4" """
l"""⊤ ⊢ ∀u16: U16  u16 >> u16"2" == u16 / u16"4" """
l"""⊤ ⊢ ∀u32: U32  u32 >> u32"2" == u32 / u32"4" """
l"""⊤ ⊢ ∀u64: U64  u64 >> u64"2" == u64 / u64"4" """

val u8v255: U8 = u8"255"
l"""⊢ u8v255 == U8.Max ∧ U8.Min - u8"1" == U8.Max ∧ U8.Max + u8"1" == U8.Min"""
l"""⊢ u8v255 >> u8"2" == u8"63" """

val u16v65535: U16 = u16"65 535"
l"""⊢ u16v65535 == U16.Max ∧ U16.Min - u16"1" == U16.Max ∧ U16.Max + u16"1" == U16.Min"""
l"""⊢ u16v65535 >> u16"2" == u16"16 383" """

val u32v4294967295: U32 = u32"4 294 967 295"
l"""⊢ u32v4294967295 == U32.Max ∧ U32.Min - u32"1" == U32.Max ∧ U32.Max + u32"1" == U32.Min"""
l"""⊢ u32v4294967295 >> u32"2" == u32"1 073 741 823" """

val u64v18446744073709551615: U64 = u64"18 446 744 073 709 551 615"
l"""⊢ u64v18446744073709551615 == U64.Max ∧ U64.Min - u64"1" == U64.Max ∧ U64.Max + u64"1" == U64.Min"""
l"""⊢ u64v18446744073709551615 >> u64"2" == u64"4 611 686 018 427 387 903" """

val rv1d0: R = r"1.0"
val rv2d0: R = r"2.0"
l"""⊢ rv1d0 + rv2d0 == r"3.0" """
l"""⊢ rv1d0 * rv2d0 == r"2.0" """

val f32v1: F32 = 1.0f
val f32v2: F32 = 2f
l"""⊢ f32v1 + f32v2 == 3f"""
l"""⊢ f32v1 * f32v2 == 2f"""

val f64v1: F64 = 1.0d
val f64v2: F64 = 2.0
l"""⊢ f64v1 + f64v2 == 3d"""
l"""⊢ f64v1 * f64v2 == 2d"""
